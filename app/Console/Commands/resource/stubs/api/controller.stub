<?php

namespace {{namespace}};

use App\Utils\ApiValidator;
use Illuminate\Http\Request;
use Exception;
use App\Utils\ExceptionLogger;

use App\Http\Requests;

use {{manager}};

class {{name}}Controller extends Controller
{

    /**
     * Create a new controller instance.
     */
    public function __construct()
    {
        $this->middleware('RESTpermission:{{lowUnderscoreName}}')
            ->only(['index', 'store']);

        $this->middleware('own:{{lowUnderscoreName}}')
            ->except(['index', 'store']);
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        try {
            $data = {{manager}}::query();

            return response()->json($data, 200);
        } catch (Exception $e) {
            ExceptionLogger::log($e);
            return response()->json($e->getMessage(), 500);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param string $field required // TODO
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        ApiValidator::make($request->all(), [
            'field' => 'required', // TODO
        ]);

        if (ApiValidator::fails()) {
            return ApiValidator::response();
        }

        try {
            $data = {{manager}}::store($request->all());

            return response()->json($data, 201);
        } catch (Exception $e) {
            ExceptionLogger::log($e);
            return response()->json($e->getMessage(), 500);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param string ${{lowUnderscoreName}} The {{lowUnderscoreName}} id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        try {
            $data = {{manager}}::show($id);

            if (!$data) {
                return ExceptionLogger::apiReturnModelNotFound('{{lowUnderscoreName}}');
            }

            return response()->json($data, 200);
        } catch (Exception $e) {
            ExceptionLogger::log($e);
            return response()->json($e->getMessage(), 500);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param string $field required // TODO
     * @param string ${{lowUnderscoreName}} The {{lowUnderscoreName}} id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        ApiValidator::make($request->all(), [
            'field' => 'required', // TODO
        ]);

        if (ApiValidator::fails()) {
            return ApiValidator::response();
        }

        try {
            $data = {{manager}}::update($request->all(), $id);

            if (!$data) {
                return ExceptionLogger::apiReturnModelNotFound('{{lowUnderscoreName}}');
            }

            return response()->json($data, 200);
        } catch (Exception $e) {
            ExceptionLogger::log($e);
            return response()->json($e->getMessage(), 500);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param string ${{lowUnderscoreName}} The {{lowUnderscoreName}} id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        try {
            $data = {{manager}}::destroy($id);

            if (!$data) {
                return ExceptionLogger::apiReturnModelNotFound('{{lowUnderscoreName}}');
            }

            return response()->json($data, 200);
        } catch (Exception $e) {
            ExceptionLogger::log($e);
            return response()->json($e->getMessage(), 500);
        }
    }
}
